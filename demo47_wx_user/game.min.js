/* KEYGAMES NETWORK */
function MusicPlay() {
  (s_death = createjs.Sound.createInstance("death")),
    (s_up = createjs.Sound.createInstance("up")),
    (music = createjs.Sound.createInstance("music")),
    music.play({
      loop: -1,
    }),
    (window_controller.windows[1].btn_a.visible = !0),
    (window_controller.windows[1].btn_a_up.visible = !0),
    window_controller.windows[1].btn_a_up.gotoAndStop(
      music.getMute() ? "icon_sound_off" : "icon_sound_on"
    ),
    (window_controller.windows[2].btn_a.visible = !0),
    (window_controller.windows[2].btn_a_up.visible = !0),
    window_controller.windows[2].btn_a_up.gotoAndStop(
      music.getMute() ? "icon_sound_off" : "icon_sound_on"
    );
}

function Play(a) {
  if (audio_supported)
    switch (a) {
      case "death":
        s_death.play();
        break;
      case "up":
        s_up.play();
    }
}

function AudioSwitch(a) {
  void 0 != music &&
    (music.setMute(a),
    s_up.setMute(a),
    s_death.setMute(a),
    window_controller.windows[1].btn_a_up.gotoAndStop(
      a ? "icon_sound_off" : "icon_sound_on"
    ),
    window_controller.windows[2].btn_a_up.gotoAndStop(
      a ? "icon_sound_off" : "icon_sound_on"
    ));
}

function ClassBalScore() {
  (this.getImg = ss_data.clone()),
    this.getImg.gotoAndStop("bonus_pink"),
    (this.getImg.regX = 10 * devise_size),
    (this.getImg.regY = 10 * devise_size);
}

function ClassBonus() {
  (this.getImg = ss_data.clone()),
    (this.getImg.regX = 10 * devise_size),
    (this.getImg.regY = 10 * devise_size),
    (this.value = 0);
}

function ClassDrag() {
  (this.getImg = new createjs.Container()),
    (this.round = new createjs.Graphics());
  var a = new createjs.Shape(this.round);
  (a.x = 160 * devise_size),
    (a.y = 240 * devise_size),
    this.getImg.addChild(a),
    (this.sin = 0),
    (this.sin2 = 0);
  var b = ss_data.clone();
  b.gotoAndPlay("hand"),
    (b.x = 148 * devise_size),
    (b.y = 246 * devise_size),
    this.getImg.addChild(b),
    (this.drag = ss_data.clone()),
    this.drag.gotoAndStop("marker_drag"),
    (this.drag.y = 222 * devise_size),
    this.getImg.addChild(this.drag);
}

function ClassEnemy(a, b) {
  (this.getImg = ss_data.clone()),
    this.getImg.gotoAndStop("pers_enemy"),
    (this.getImg.snapToPixel = !0),
    (this.getImg.x = a),
    (this.getImg.y = b),
    (this.getImg.regX = 24 * devise_size),
    (this.getImg.regY = 24 * devise_size);
  var c = 2 * Math.PI * Math.random();
  this.speed = {
    x: Math.cos(c),
    y: Math.sin(c),
  };
}

function ClassGame() {
  (this.location = new ClassLocation()),
    (this.life = new ClassLife()),
    (this.score = new ClassScore());
}

function ClassLife() {
  (this.value = 0), (this.getImg = new createjs.Container());
  var a = ss_data.clone();
  a.gotoAndStop("icon_life"),
    this.getImg.addChild(a),
    (this.text = new ClassText(1)),
    (this.text.getImg.x = 23 * devise_size),
    (this.text.getImg.y = -6 * devise_size),
    this.getImg.addChild(this.text.getImg);
}

function ClassLocation() {
  (this.frame = 0),
    (this.speed = 0),
    (this.time_bonus_scale = 0),
    (this.time_life = 0),
    (this.time_end = 0),
    (this.border = new createjs.Rectangle(
      14 * devise_size,
      117 * devise_size,
      309 * devise_size,
      411 * devise_size
    )),
    (this.getImg = new createjs.Container()),
    (this.score_up = new ClassMassScopreUp()),
    (this.bonus = new ClassBonus()),
    (this.bal = new ClassBalScore()),
    (this.drag = new ClassDrag()),
    (this.player = new ClassPlayer()),
    (this.enemys = [
      new ClassEnemy(
        this.border.x + 30 * devise_size,
        this.border.y + 30 * devise_size
      ),
      new ClassEnemy(
        this.border.x + 30 * devise_size,
        this.border.height - 30 * devise_size
      ),
      new ClassEnemy(
        this.border.width - 30 * devise_size,
        this.border.y + 30 * devise_size
      ),
      new ClassEnemy(
        this.border.width - 30 * devise_size,
        this.border.height - 30 * devise_size
      ),
    ]),
    (this.cr = new createjs.Shape()),
    this.cr.graphics
      .ss(devise_size)
      .f("rgba(110,210,255,0.4)")
      .s("rgba(110,210,255,0.8)")
      .dc(0, 0, 34 * devise_size),
    this.getImg.addChild(this.bonus.getImg),
    this.getImg.addChild(this.bal.getImg),
    this.getImg.addChild(this.enemys[0].getImg),
    this.getImg.addChild(this.enemys[1].getImg),
    this.getImg.addChild(this.enemys[2].getImg),
    this.getImg.addChild(this.enemys[3].getImg),
    this.getImg.addChild(this.cr),
    this.getImg.addChild(this.player.getImg),
    this.getImg.addChild(this.drag.getImg),
    this.getImg.addChild(this.score_up.getImg);
}

function ClassMassScopreUp() {
  (this.getImg = new createjs.Container()),
    (this.i = 0),
    (this.img = [ss_data.clone(), ss_data.clone(), ss_data.clone()]),
    (this.offset = [0, 0, 0]);
  for (var a = 0; a < this.img.length; a++)
    (this.img[a].visible = !1),
      this.img[a].gotoAndStop("score"),
      (this.img[a].snapToPixel = !0),
      (this.img[a].regX = 15 * devise_size),
      (this.img[a].regY = 9 * devise_size),
      this.getImg.addChild(this.img[a]);
}

function ClassPlayer() {
  (this.getImg = ss_data.clone()),
    this.getImg.gotoAndStop("pers_live"),
    (this.getImg.snapToPixel = !0),
    (this.getImg.x = 160 * devise_size),
    (this.getImg.y = 240 * devise_size),
    (this.getImg.regX = 15 * devise_size),
    (this.getImg.regY = 18 * devise_size),
    this.getImg.on("mousedown", function (a) {
      0 == game.location.time_end &&
        ((game.location.cr.visible = !0),
        game.location.drag.Hide(),
        (a.target.x = Math.max(
          game.location.border.x + a.target.regX,
          Math.min(game.location.border.width - a.target.regX, a.stageX)
        )),
        (a.target.y = Math.max(
          game.location.border.y + a.target.regY,
          Math.min(game.location.border.height - a.target.regY, a.stageY)
        )));
    }),
    this.getImg.on("pressmove", function (a) {
      0 == game.location.time_end &&
        ((a.target.x = Math.max(
          game.location.border.x + a.target.regX,
          Math.min(game.location.border.width - a.target.regX, a.stageX)
        )),
        (a.target.y = Math.max(
          game.location.border.y + a.target.regY,
          Math.min(game.location.border.height - a.target.regY, a.stageY)
        )));
    }),
    this.getImg.on("pressup", function (a) {
      0 == game.location.time_end &&
        ((game.location.cr.visible = !1),
        (a.target.x = Math.max(
          game.location.border.x + a.target.regX,
          Math.min(game.location.border.width - a.target.regX, a.stageX)
        )),
        (a.target.y = Math.max(
          game.location.border.y + a.target.regY,
          Math.min(game.location.border.height - a.target.regY, a.stageY)
        )));
    });
}

function ClassScore() {
  (this.val = 0),
    (this.text = new ClassText(0)),
    (this.getImg = this.text.getImg);
}

function ClassText(a) {
  (this.font = a), (this.getImg = new createjs.Container());
  for (var b = 0; 4 > b; b++)
    this.getImg.addChild(fonts[this.font].ss_font.clone());
}

function WindowEnd() {
  (this.back_end = !1),
    (this.getImg = new createjs.Container()),
    (this.getImg.x = 160 * devise_size),
    (this.getImg.y = 240 * devise_size),
    (this.getImg.regX = 128 * devise_size),
    (this.getImg.regY = 111 * devise_size);
  var a = ss_data.clone();
  a.gotoAndStop("window"), this.getImg.addChild(a);
  var b = ss_data.clone();
  //important score坐标
  b.gotoAndStop("text_score"),
    (b.x = 51 * devise_size),
    (b.y = 30 * devise_size),
    this.getImg.addChild(b),
    (this.text_score_v = 0),
    (this.text_score_speed = 0),
    (this.text_score = new ClassText(0)),
    (this.text_score.getImg.x = 78 * devise_size),
    (this.text_score.getImg.y = 38 * devise_size),
    this.getImg.addChild(this.text_score.getImg);
  var c = ss_data.clone();
  //important best坐标
  c.gotoAndStop("text_best"),
    (c.x = 143 * devise_size),
    (c.y = 26 * devise_size),
    this.getImg.addChild(c),
    (this.text_best = new ClassText(0)),
    (this.text_best.getImg.x = 163 * devise_size),
    (this.text_best.getImg.y = 38 * devise_size),
    this.getImg.addChild(this.text_best.getImg);
  //   //important 分享
  //   var fenxiang = ss_data.clone();
  //   fenxiang.gotoAndStop("text_score"),
  //     (fenxiang.x = 51 * devise_size),
  //     (fenxiang.y = 120 * devise_size),
  //     this.getImg.addChild(fenxiang);
  // //
  var d = ss_data.clone();
  d.gotoAndStop("btn_play_again"),
    (d.x = 38 * devise_size),
    (d.y = 160 * devise_size),
    d.on("mousedown", function () {
      //important 再玩一次
      shareLabelFalse();
      rankLabelFalse();
      (window_controller.windows[0].getImg.mouseEnabled = !0),
        (window_controller.windows[1].getImg.mouseEnabled = !0),
        (window_controller.windows[2].getImg.mouseEnabled = !0),
        (window_controller.windows[4].getImg.mouseEnabled = !0),
        game.location.Re(),
        window_controller.Show("loc");
    }),
    this.getImg.addChild(d);
  //   var e = ss_data.clone();
  //   e.on("mousedown", function () {
  //     (window_controller.windows[0].getImg.mouseEnabled = !0),
  //       (window_controller.windows[1].getImg.mouseEnabled = !0),
  //       (window_controller.windows[2].getImg.mouseEnabled = !0),
  //       (window_controller.windows[4].getImg.mouseEnabled = !0),
  //       (window_controller.windows[4].back_end = !0),
  //       (window_controller.windows[3].getImg.visible = !1),
  //       window_controller.Show("help");
  //   }),
  //     e.gotoAndStop("btn"),
  //     (e.x = 18 * devise_size),
  //     (e.y = 71 * devise_size),
  //     (e.scaleX = e.scaleY = 0.8),
  //     this.getImg.addChild(e);
  //   var f = ss_data.clone();
  //   f.gotoAndStop("icon_help"),
  //     (f.x = 30 * devise_size),
  //     (f.y = 79 * devise_size),
  //     this.getImg.addChild(f);
  //   var g = ss_data.clone();
  //   g.on("mousedown", function () {
  //     //window.open(config.url_more_games)
  //     try {
  //       parent.moregame();
  //     } catch (e) {}
  //   }),
  //     g.gotoAndStop("btn"),
  //     (g.x = 192 * devise_size),
  //     (g.y = 71 * devise_size),
  //     (g.scaleX = g.scaleY = 0.8),
  //     this.getImg.addChild(g);
  var h = ss_data.clone();
  if (
    //       h.gotoAndStop("icon_more_games"),
    // (h.x = 196 * devise_size),
    // (h.y = 79 * devise_size),
    // this.getImg.addChild(h),
    ((this.btn_back = ss_data.clone()),
    this.btn_back.on("mousedown", function () {
      shareLabelFalse();
      rankLabelFalse();
      (window_controller.windows[0].getImg.mouseEnabled = !0),
        (window_controller.windows[1].getImg.mouseEnabled = !0),
        (window_controller.windows[2].getImg.mouseEnabled = !0),
        (window_controller.windows[4].getImg.mouseEnabled = !0),
        window_controller.Show("mm");
    }),
    this.btn_back.gotoAndStop("btn_back"),
    (this.btn_back.x = 84 * devise_size),
    (this.btn_back.y = 225 * devise_size),
    // this.getImg.addChild(this.btn_back),
    /Android/i.test(navigator.userAgent))
  ) {
    // var i = ss_data.clone();
    // i.on("mousedown", function () {
    //   //window.open(config.url_google_play)
    //   try {
    //     parent.moregame();
    //   } catch (e) {}
    // }),
    //   i.gotoAndStop("btn_google_play"),
    //   (i.x = 78 * devise_size),
    //   (i.y = -16 * devise_size),
    //   this.getImg.addChild(i);
  } else if (/iPhone|iPad|iPod/i.test(navigator.userAgent)) {
    // var i = ss_data.clone();
    // i.on("mousedown", function () {
    //   //window.open(config.url_app_store)
    //   try {
    //     parent.moregame();
    //   } catch (e) {}
    // }),
    //   i.gotoAndStop("btn_app_store"),
    //   (i.x = 78 * devise_size),
    //   (i.y = -16 * devise_size),
    //   this.getImg.addChild(i);
  } else {
    // var i = ss_data.clone();
    // i.on("mousedown", function () {
    //   //window.open(config.url_google_play)
    //   try {
    //     parent.moregame();
    //   } catch (e) {}
    // }),
    //   i.gotoAndStop("btn_google_play"),
    //   (i.x = 24 * devise_size),
    //   (i.y = -16 * devise_size),
    //   this.getImg.addChild(i);
    // var j = ss_data.clone();
    // j.on("mousedown", function () {
    //   //window.open(config.url_app_store)
    //   try {
    //     parent.moregame();
    //   } catch (e) {}
    // }),
    //   j.gotoAndStop("btn_app_store"),
    //   (j.x = 132 * devise_size),
    //   (j.y = -16 * devise_size),
    //   this.getImg.addChild(j);
  }

  (this.hiscore = ss_data.clone()),
    this.hiscore.gotoAndStop("hiscore"),
    (this.hiscore.x = -22 * devise_size),
    (this.hiscore.y = 16 * devise_size),
    this.getImg.addChild(this.hiscore);
}

function WindowHelp() {
  (this.getImg = new createjs.Container()),
    (this.getImg.x = 160 * devise_size),
    (this.getImg.y = 240 * devise_size),
    (this.getImg.regX = 128 * devise_size),
    (this.getImg.regY = 111 * devise_size);
  var a = ss_data.clone();
  a.gotoAndStop("window"), this.getImg.addChild(a);
  var b = ss_data.clone();
  b.gotoAndStop("help"),
    (b.x = 31 * devise_size),
    (b.y = 20 * devise_size),
    this.getImg.addChild(b);
  var c = ss_data.clone();
  c.gotoAndStop("bonus_life"),
    (c.x = 60 * devise_size),
    (c.y = 62 * devise_size),
    this.getImg.addChild(c);
  var d = ss_data.clone();
  d.gotoAndPlay("bonus_anim"),
    (d.x = 60 * devise_size),
    (d.y = 98 * devise_size),
    this.getImg.addChild(d);
  var e = ss_data.clone();
  e.gotoAndStop("bonus_speed"),
    (e.x = 60 * devise_size),
    (e.y = 134 * devise_size),
    this.getImg.addChild(e);
  var f = ss_data.clone();
  f.on("mousedown", function () {
    (window_controller.windows[0].getImg.mouseEnabled = !0),
      (window_controller.windows[1].getImg.mouseEnabled = !0),
      (window_controller.windows[2].getImg.mouseEnabled = !0),
      (window_controller.windows[3].getImg.mouseEnabled = !0),
      (window_controller.windows[4].getImg.visible = !1),
      window_controller.windows[4].back_end &&
        ((window_controller.windows[4].back_end = !1),
        (window_controller.windows[3].getImg.visible = !0));
  }),
    f.gotoAndStop("btn_back"),
    (f.x = 83 * devise_size),
    (f.y = 175 * devise_size),
    this.getImg.addChild(f);
}

function WindowLocation() {
  this.getImg = new createjs.Container();
  var a = new createjs.Bitmap(load.queue.getResult("bg"));
  this.getImg.addChild(a),
    this.getImg.addChild(game.location.getImg),
    (this.title_game = new createjs.Container()),
    this.getImg.addChild(this.title_game),
    (game.life.getImg.x = 10 * devise_size),
    (game.life.getImg.y = 81 * devise_size),
    this.title_game.addChild(game.life.getImg),
    (game.score.getImg.x = 145 * devise_size),
    (game.score.getImg.y = 54 * devise_size),
    this.title_game.addChild(game.score.getImg);
  var b = ss_data.clone();
  b.on("mousedown", function () {
    window_controller.Show("help");
  }),
    b.gotoAndStop("btn"),
    (b.x = 275 * devise_size),
    (b.y = 66 * devise_size),
    (b.scaleX = b.scaleY = 0.6),
    this.title_game.addChild(b);
  var c = ss_data.clone();
  c.gotoAndStop("icon_help"),
    (c.x = 285 * devise_size),
    (c.y = 73 * devise_size),
    (c.scaleX = c.scaleY = 0.6),
    this.title_game.addChild(c);
  var d = ss_data.clone();
  d.on("mousedown", function () {
    //window.open(config.url_more_games)
    try {
      parent.moregame();
    } catch (e) {}
  }),
  //   d.gotoAndStop("btn"),
  //   (d.x = 232 * devise_size),
  //   (d.y = 66 * devise_size),
  //   (d.scaleX = d.scaleY = 0.6),
  //   this.title_game.addChild(d);
  // var e = ss_data.clone();
  // e.gotoAndStop("icon_more_games"),
  //   (e.x = 238 * devise_size),
  //   (e.y = 74 * devise_size),
  //   (e.scaleX = e.scaleY = 0.6),
  //   this.title_game.addChild(e),
    (this.btn_a = ss_data.clone()),
    this.btn_a.gotoAndStop("btn"),
    this.btn_a.on("mousedown", function () {
      AudioSwitch(!music.getMute());
    }),
    (this.btn_a.x = 189 * devise_size),
    (this.btn_a.y = 66 * devise_size),
    (this.btn_a.scaleX = this.btn_a.scaleY = 0.6),
    this.title_game.addChild(this.btn_a),
    (this.btn_a_up = ss_data.clone()),
    this.btn_a_up.gotoAndStop("icon_sound_off"),
    (this.btn_a_up.x = 195 * devise_size),
    (this.btn_a_up.y = 72 * devise_size),
    (this.btn_a_up.scaleX = this.btn_a_up.scaleY = 0.6),
    this.title_game.addChild(this.btn_a_up),
    (this.title = ss_data.clone()),
    (this.title.y = 55 * devise_size),
    this.getImg.addChild(this.title);
}

function WindowMainMenu() {
  this.getImg = new createjs.Container();
  var a = new createjs.Bitmap(load.queue.getResult("menu_bg"));
  this.getImg.addChild(a);
  var b = ss_data.clone();
  b.on("mousedown", function () {
    //   load.LoadAudio(),
    //important 开始游戏
  }),
    b.gotoAndStop("btn_start"),
    (b.x = 109 * devise_size),
    (b.y = 321 * devise_size),
    this.getImg.addChild(b),
    (this.btn_a = ss_data.clone()),
    this.btn_a.gotoAndStop("btn"),
    this.btn_a.on("mousedown", function () {
      load.LoadAudio(), AudioSwitch(!music.getMute());
    }),
    (this.btn_a.x = 12 * devise_size),
    (this.btn_a.y = 363 * devise_size),
    this.getImg.addChild(this.btn_a),
    (this.btn_a_up = ss_data.clone()),
    this.btn_a_up.gotoAndStop("icon_sound_on"),
    (this.btn_a_up.x = 23 * devise_size),
    (this.btn_a_up.y = 374 * devise_size),
    this.getImg.addChild(this.btn_a_up);
  var c = ss_data.clone();
  c.on("mousedown", function () {
    load.LoadAudio();
    //try{parent.moregame();}catch(e){}
  }),
    c.gotoAndStop("btn"),
    (c.x = 254 * devise_size),
    (c.y = 363 * devise_size),
    this.getImg.addChild(c);
  var d = ss_data.clone();
  d.gotoAndStop("icon_more_games"),
    (d.x = 264 * devise_size),
    (d.y = 376 * devise_size),
    this.getImg.addChild(d);
  var e = ss_data.clone();
  e.on("mousedown", function () {
    load.LoadAudio(), window_controller.Show("help");
  }),
    e.gotoAndStop("btn"),
    (e.x = 265 * devise_size),
    (e.y = 64 * devise_size),
    (e.scaleX = e.scaleY = 0.8),
    this.getImg.addChild(e);
  var f = ss_data.clone();
  f.gotoAndStop("icon_help"),
    (f.x = 276 * devise_size),
    (f.y = 71 * devise_size),
    this.getImg.addChild(f),
    (this.nose_0 = ss_data.clone()),
    this.nose_0.gotoAndStop("nose"),
    (this.nose_0.regX = 20 * devise_size),
    (this.nose_0.regY = 20 * devise_size),
    (this.nose_0.x = 92 * devise_size),
    (this.nose_0.y = 193 * devise_size),
    this.getImg.addChild(this.nose_0),
    (this.nose_1 = ss_data.clone()),
    this.nose_1.gotoAndStop("nose"),
    (this.nose_1.regX = 20 * devise_size),
    (this.nose_1.regY = 20 * devise_size),
    (this.nose_1.x = 232 * devise_size),
    (this.nose_1.y = 197 * devise_size),
    this.getImg.addChild(this.nose_1),
    (this.title = ss_data.clone()),
    this.title.gotoAndStop("title"),
    (this.title.regX = 54 * devise_size),
    (this.title.x = 160 * devise_size),
    (this.title.y = 60 * devise_size),
    this.getImg.addChild(this.title),
    (this.sin = 0);
  var g = ss_data.clone();
  if (
    (g.on("mousedown", function () {
      //window.open(config.url_logo)
      try {
        parent.moregame();
      } catch (e) {}
    }),
    g.gotoAndStop("logo"),
    (g.x = 95 * devise_size),
    (g.y = 370 * devise_size),
    this.getImg.addChild(g),
    /Android/i.test(navigator.userAgent))
  ) {
    var h = ss_data.clone();
    h.on("mousedown", function () {
      //window.open(config.url_google_play)
      try {
        parent.moregame();
      } catch (e) {}
    }),
      h.gotoAndStop("btn_google_play"),
      (h.x = 216 * devise_size),
      (h.y = 270 * devise_size),
      this.getImg.addChild(h);
  } else if (/iPhone|iPad|iPod/i.test(navigator.userAgent)) {
    var h = ss_data.clone();
    h.on("mousedown", function () {
      //window.open(config.url_app_store)
      try {
        parent.moregame();
      } catch (e) {}
    }),
      h.gotoAndStop("btn_app_store"),
      (h.x = 216 * devise_size),
      (h.y = 270 * devise_size),
      this.getImg.addChild(h);
  } else {
    var h = ss_data.clone();
    h.on("mousedown", function () {
      //window.open(config.url_google_play)
      try {
        parent.moregame();
      } catch (e) {}
    }),
      h.gotoAndStop("btn_google_play"),
      (h.x = 216 * devise_size),
      (h.y = 250 * devise_size),
      this.getImg.addChild(h);
    var i = ss_data.clone();
    i.on("mousedown", function () {
      //window.open(config.url_app_store)
      try {
        parent.moregame();
      } catch (e) {}
    }),
      i.gotoAndStop("btn_app_store"),
      (i.x = 216 * devise_size),
      (i.y = 290 * devise_size),
      this.getImg.addChild(i);
  }
}

function WindowSplashScreen() {
  this.getImg = new createjs.Container();
  var a = new createjs.Shape();
  a.on("mousedown", function () {
    //window.open(config.url_splash_screen)
    try {
      parent.moregame();
    } catch (e) {}
  }),
    a.graphics
      .f(config.ss_bg_color)
      .dr(0, 0, 320 * devise_size, 480 * devise_size),
    this.getImg.addChild(a);
  var b = ss_data.clone();
  b.gotoAndStop("logo"),
    (b.x = 191 * devise_size),
    (b.y = 431 * devise_size),
    this.getImg.addChild(b),
    (this.alpha = 0);
}

function WindowsController() {
  this.windows = [
    new WindowSplashScreen(),
    new WindowMainMenu(),
    new WindowLocation(),
    new WindowEnd(),
    new WindowHelp(),
  ];
  for (var a = 0; 5 > a; a++) stage.addChild(this.windows[a].getImg);
}
var music,
  s_death,
  s_up,
  lock_audio = !0,
  audio_supported,
  api_game = {
    load_game: function () {
      console.log("load game"), keyGamesAPI_loadingComplete();
    },
    pause_save_audio: !1,
    pause_game: function (a) {
      //console.log("pause game: " + a), global_pause = a, a ? (api_game.pause_save_audio = music.getMute(), AudioSwitch(!0)) : AudioSwitch(api_game.pause_save_audio)
    },
    audio_switch: function (a) {
      console.log("audio switch: " + a), AudioSwitch(a);
    },
    sound_switch: function (a) {
      console.log("sound switch: " + a);
    },
    music_switch: function (a) {
      console.log("music switch: " + a);
    },
    game_over: function () {
      console.log("game over");
      //console.log("game over"), keyGamesAPI_gameOver()
    },
    send_score: function (a) {
      //console.log("send score: ", a), keyGamesAPI_sendScore(a)
    },
    level_complete: function () {
      console.log("level complete");
    },
    level_complete_score: function (a) {
      console.log("level complete score: ", a);
    },
    resize: function (a, b) {
      console.log("resize: " + a + " " + b), Resize(a, b);
    },
    restart: function (a, b) {
      console.log("resize: " + a + " " + b), game.location.Re();
    },
  };
(keyGamesAPI_gamePause = function (a) {
  game_logger("gamePause: " + a), api_game.pause_game("on" == a);
}),
  (keyGamesAPI_SoundControl = function (a) {
    game_logger("soundControl: " + a), api_game.audio_switch("off" == a);
  }),
  (keyGamesAPI_gameResize = function (a, b) {
    game_logger("gameResize: " + a + ", " + b), api_game.resize(a, b);
  }),
  (keyGamesAPI_gameRestart = function () {
    game_logger("gameRestart"), api_game.restart();
  }),
  (ClassBalScore.prototype.Re = function () {
    this.getImg.visible = !1;
  }),
  (ClassBalScore.prototype.Go = function () {
    (this.getImg.visible = !0),
      (this.getImg.x =
        game.location.border.x +
        this.getImg.regX +
        (((game.location.border.width -
          game.location.border.x -
          2 * this.getImg.regX) *
          Math.random()) <<
          0)),
      (this.getImg.y =
        game.location.border.y +
        this.getImg.regY +
        (((game.location.border.height -
          game.location.border.y -
          2 * this.getImg.regY) *
          Math.random()) <<
          0));
  }),
  (ClassBalScore.prototype.Up = function () {
    Play("up"), 
    game.score.Add(5), 
    this.Go();
  });
var bonus = ["bonus_anim", "bonus_life", "bonus_speed"];
(ClassBonus.prototype.Re = function () {
  this.getImg.visible = !1;
}),
  (ClassBonus.prototype.Go = function () {
    (this.getImg.visible = !0),
      (this.value = (3 * Math.random()) << 0),
      this.getImg.gotoAndPlay(bonus[this.value]),
      (this.getImg.x =
        game.location.border.x +
        this.getImg.regX +
        (((game.location.border.width -
          game.location.border.x -
          2 * this.getImg.regX) *
          Math.random()) <<
          0)),
      (this.getImg.y =
        game.location.border.y +
        this.getImg.regY +
        (((game.location.border.height -
          game.location.border.y -
          2 * this.getImg.regY) *
          Math.random()) <<
          0));
  }),
  (ClassBonus.prototype.Up = function () {
    switch ((Play("up"), (this.getImg.visible = !1), this.value)) {
      case 0:
        game.location.setBonusScale(!0);
        break;
      case 1:
    
        game.life.Add(1);
        break;
      case 2:
        game.location.speed = Math.max(
          0.5,
          game.location.speed + config.bonus_speed * devise_size
        );
    }
  }),
  (ClassDrag.prototype.Hide = function () {
    this.getImg.visible &&
      ((window_controller.windows[2].title_game.visible = !0),
      (window_controller.windows[2].title.visible = !1),
      (this.getImg.visible = !1),
      game.location.bal.Go());
  }),
  (ClassDrag.prototype.Re = function () {
    (this.getImg.visible = !0),
      this.round.clear(),
      (this.sin = 0),
      (this.sin2 = 0);
  }),
  (ClassDrag.prototype.Drw = function () {
    (this.sin += 0.1),
      (this.drag.x = ((185 + 6 * Math.sin(this.sin)) * devise_size) << 0),
      (this.sin2 += 0.04),
      this.sin2 > Math.PI && (this.sin2 = 0),
      this.round.clear(),
      this.sin2 < Math.PI / 2 &&
        this.sin2 > 0.4 &&
        this.round
          .ss(3 * devise_size)
          .s(
            "rgba(255,255,255," +
              Math.min(1, 1 - (this.sin2 - 0.57)).toString() +
              ")"
          )
          .dc(0, 0, 60 * Math.sin(this.sin2) * devise_size),
      this.sin2 - 0.8 < Math.PI / 2 &&
        this.sin2 - 0.8 > 0.4 &&
        this.round
          .ss(3 * devise_size)
          .s(
            "rgba(255,255,255," +
              Math.min(1, 1 - (this.sin2 - 0.8 - 0.57)).toString() +
              ")"
          )
          .dc(0, 0, 60 * Math.sin(this.sin2 - 0.8) * devise_size);
  }),
  (ClassEnemy.prototype.Re = function (a, b) {
    (this.getImg.x = a),
      (this.getImg.y = b),
      (this.getImg.scaleX = this.getImg.scaleX = 1);
  }),
  (ClassEnemy.prototype.Drw = function () {
    (this.getImg.x += game.location.speed * this.speed.x),
      (this.getImg.y += game.location.speed * this.speed.y),
      this.getImg.x <
      game.location.border.x + this.getImg.regX * this.getImg.scaleX
        ? ((this.getImg.x =
            game.location.border.x + this.getImg.regX * this.getImg.scaleX),
          (this.speed.x *= -1))
        : this.getImg.x >
            game.location.border.width -
              this.getImg.regX * this.getImg.scaleX &&
          ((this.getImg.x =
            game.location.border.width - this.getImg.regX * this.getImg.scaleX),
          (this.speed.x *= -1)),
      this.getImg.y <
      game.location.border.y + this.getImg.regY * this.getImg.scaleY
        ? ((this.getImg.y =
            game.location.border.y + this.getImg.regY * this.getImg.scaleY),
          (this.speed.y *= -1))
        : this.getImg.y >
            game.location.border.height -
              this.getImg.regY * this.getImg.scaleY &&
          ((this.getImg.y =
            game.location.border.height -
            this.getImg.regY * this.getImg.scaleY),
          (this.speed.y *= -1));
  }),
  (ClassLife.prototype.Re = function () {
    
    (this.value = 1), this.text.setText(this.value.toString());
  }),
  (ClassLife.prototype.Add = function (a) {
   if(a<0){
   
  document.getElementById("my_canvas").classList.add("animation");
          setTimeout(function(){
            document.getElementById("my_canvas").classList.remove("animation");
          },1000)
   }
    (this.value += a),
      this.text.setText(this.value.toString()),
      0 > a &&
        (Play("death"),
        this.value <= 0
          ? ((window_controller.windows[2].title_game.visible = !1),
            (window_controller.windows[2].title.visible = !0),
            window_controller.windows[2].title.gotoAndStop("text_game_over"),
            (window_controller.windows[2].title.x = 43 * devise_size),
            game.location.player.getImg.gotoAndStop("pers_dead"),
            (game.location.time_end = 10 * devise_size),
            (game.location.cr.visible = !1))
          : ((game.location.player.getImg.alpha = 0.5),
            (game.location.time_life = 30 * config.time_down_life)));
  }),
  (ClassLocation.prototype.setBonusScale = function (a) {
    game.location.time_bonus_scale = 30 * config.time_bonus_scale;
    for (var b = 0; 4 > b; b++)
      this.enemys[b].getImg.scaleX = this.enemys[b].getImg.scaleY = a ? 0.5 : 1;
  }),
  (ClassLocation.prototype.Re = function () {
    (window_controller.windows[2].title_game.visible = !1),
      (window_controller.windows[2].title.visible = !0),
      window_controller.windows[2].title.gotoAndStop("text_get_ready"),
      (window_controller.windows[2].title.x = 40 * devise_size),
      (this.time_end = 0),
      (this.frame = 0),
      (this.speed = config.start_speed * devise_size),
      (this.time_bonus_scale = 0),
      this.setBonusScale(!1),
      game.life.Re(),
      game.score.Re(),
      this.drag.Re(),
      this.player.Re(),
      this.bonus.Re(),
      this.bal.Re(),
      this.score_up.Re(),
      this.enemys[0].Re(
        this.border.x + 30 * devise_size,
        this.border.y + 30 * devise_size
      ),
      this.enemys[1].Re(
        this.border.x + 30 * devise_size,
        this.border.height - 30 * devise_size
      ),
      this.enemys[2].Re(
        this.border.width - 30 * devise_size,
        this.border.y + 30 * devise_size
      ),
      this.enemys[3].Re(
        this.border.width - 30 * devise_size,
        this.border.height - 30 * devise_size
      );
  }),
  (ClassLocation.prototype.Drw = function () {
    if (
      ((this.cr.x = this.player.getImg.x),
      (this.cr.y = this.player.getImg.y),
      this.drag.getImg.visible)
    )
      this.drag.Drw();
    else if (0 != this.time_end)
      this.time_end--, 1 == this.time_end && window_controller.Show("end");
    else {
      1 == this.time_life && (this.player.getImg.alpha = 1),
        this.time_life--,
        1 == this.time_bonus_scale && this.setBonusScale(!1),
        this.time_bonus_scale--,
        this.frame++,
        this.frame % 10 == 0 && game.score.Add(1),
        this.frame % 450 == 150 && this.bonus.Go(),
        this.frame % 60 == 0 && (this.speed += 0.25 * devise_size),
        this.bonus.getImg.visible &&
          this.player.getImg.x + 26 * devise_size - this.player.getImg.regX >=
            this.bonus.getImg.x - this.bonus.getImg.regX &&
          this.player.getImg.x - this.player.getImg.regX <=
            this.bonus.getImg.x + 15 * devise_size - this.bonus.getImg.regX &&
          this.player.getImg.y + 33 * devise_size - this.player.getImg.regY >=
            this.bonus.getImg.y - this.bonus.getImg.regY &&
          this.player.getImg.y - this.player.getImg.regY <=
            this.bonus.getImg.y + 15 * devise_size - this.bonus.getImg.regX &&
          this.bonus.Up(),
        this.player.getImg.x + 26 * devise_size - this.player.getImg.regX >=
          this.bal.getImg.x - this.bal.getImg.regX &&
          this.player.getImg.x - this.player.getImg.regX <=
            this.bal.getImg.x + 21 * devise_size - this.bal.getImg.regX &&
          this.player.getImg.y + 33 * devise_size - this.player.getImg.regY >=
            this.bal.getImg.y - this.bal.getImg.regY &&
          this.player.getImg.y - this.player.getImg.regY <=
            this.bal.getImg.y + 21 * devise_size - this.bal.getImg.regX &&
          (
            // this.score_up.Go(this.bal.getImg.x, this.bal.getImg.y),
          this.bal.Up()),
        this.score_up.Drw();
      for (var a = !1, b = 0; 4 > b; b++)
        this.player.getImg.alpha > 0.5 &&
          this.player.getImg.x + 26 * devise_size - this.player.getImg.regX >=
            this.enemys[b].getImg.x -
              this.enemys[b].getImg.regX * this.enemys[b].getImg.scaleX &&
          this.player.getImg.x - this.player.getImg.regX <=
            this.enemys[b].getImg.x +
              49 * devise_size * this.enemys[b].getImg.scaleX -
              this.enemys[b].getImg.regX * this.enemys[b].getImg.scaleX &&
          this.player.getImg.y + 33 * devise_size - this.player.getImg.regY >=
            this.enemys[b].getImg.y -
              this.enemys[b].getImg.regY * this.enemys[b].getImg.scaleY &&
          this.player.getImg.y - this.player.getImg.regY <=
            this.enemys[b].getImg.y +
              49 * devise_size * this.enemys[b].getImg.scaleX -
              this.enemys[b].getImg.regX * this.enemys[b].getImg.scaleX &&
          (a = !0),
          this.enemys[b].Drw();
        
         
      a && game.life.Add(-1);
    }
  }),
  (ClassMassScopreUp.prototype.Re = function () {
    this.i = 0;
    for (var a = 0; a < this.img.length; a++) this.img[a].visible = !1;
  }),
  (ClassMassScopreUp.prototype.Go = function (a, b) {
    (this.img[this.i].x = a),
      (this.img[this.i].y = b),
      (this.img[this.i].alpha = 1),
      (this.img[this.i].scaleY = this.img[this.i].scaleX = 0),
      (this.img[this.i].visible = !0),
      (this.offset[this.i] = 0),
      this.i++,
      this.i == this.img.length && (this.i = 0);
  }),
  (ClassMassScopreUp.prototype.Drw = function () {
    for (var a = 0; a < this.img.length; a++)
      this.img[a].visible &&
        (1 != this.img[a].scaleY
          ? (this.img[a].scaleY = this.img[a].scaleX = Math.min(
              this.img[a].scaleY + 0.2,
              1
            ))
          : ((this.offset[a] += 0.2),
            (this.img[a].y -=
              ((this.offset[a] * this.offset[a]) / 2) * devise_size),
            (this.img[a].alpha = 1 - (this.offset[a] * this.offset[a]) / 25),
            this.offset[a] > 5 && (this.img[a].visible = !1)));
  }),
  (ClassPlayer.prototype.Re = function () {
    (game.location.cr.visible = !1),
      this.getImg.gotoAndStop("pers_live"),
      (this.getImg.alpha = 1),
      (this.getImg.x = 160 * devise_size),
      (this.getImg.y = 240 * devise_size);
  }),
  (ClassScore.prototype.Re = function () {
    (this.val = 0),
      this.text.setText("0"),
      (this.text.getImg.regX = (this.text.getImg.width / 2) << 0);
  }),
  (ClassScore.prototype.Add = function (a) {
    (this.val += a),
  
      this.text.setText(this.val.toString()),
      (this.text.getImg.regX = (this.text.getImg.width / 2) << 0);
  }),
  (ClassText.prototype.setText = function (a) {
    for (var b = 0, c = 0, d = 0; 4 > d; d++)
      a.length <= d
        ? (this.getImg.getChildAt(d).visible = !1)
        : ((c = fonts[this.font].chars.indexOf(a[d])),
          (this.getImg.getChildAt(d).visible = !0),
          this.getImg.getChildAt(d).gotoAndStop(c),
          (this.getImg.getChildAt(d).x = b),
          (b += fonts[this.font].kerning[c]));
    this.getImg.width = b;
  }),
  (config = {
    ss_bg_color: "#005587",
    url_more_games:
      "http://keygames.com/?utm_source=" +
      window.location.host +
      "&utm_medium=moregames&utm_campaign=avoidoctohtml5",
    url_logo:
      "http://keygames.com/?utm_source=" +
      window.location.host +
      "&utm_medium=logo&utm_campaign=avoidoctohtml5",
    url_splash_screen:
      "http://keygames.com/?utm_source=" +
      window.location.host +
      "&utm_medium=splash&utm_campaign=avoidoctohtml5",
    url_google_play:
      "https://play.google.com/store/apps/details?id=air.kgn.avoidtheoctosquids",
    url_app_store:
      "https://itunes.apple.com/us/app/avoid-octo/id880988722?l=nl&ls=1&mt=8",
    start_speed: 1.5,
    bonus_scale: 0.5,
    time_bonus_scale: 5,
    bonus_speed: -1.5,
    time_down_life: 3,
  }),
  (WindowEnd.prototype.Show = function () {
    shareLabelTrue();
    rankLabelTrue();
    (window_controller.windows[0].getImg.mouseEnabled = !1),
      (window_controller.windows[1].getImg.mouseEnabled = !1),
      (window_controller.windows[2].getImg.mouseEnabled = !1),
      (window_controller.windows[4].getImg.mouseEnabled = !1),
      (this.text_score_v = 0),
      (this.text_score_speed = Math.max(1, (game.score.val / 30) << 0)),
      this.text_score.setText("0"),
      (this.text_score.getImg.regX = (this.text_score.getImg.width / 2) << 0),

over(game.score.val)

      
      parseInt(window.sessionStorage.getItem("best")) < game.score.val
        ? (
          this.text_best.setText(game.score.val.toString()),
          (this.text_best.getImg.regX = (this.text_best.getImg.width / 2) << 0),
          (this.hiscore.visible = !0))
        : (this.text_best.setText(window.sessionStorage.getItem("best")),
          (this.text_best.getImg.regX = (this.text_best.getImg.width / 2) << 0),
          (this.hiscore.visible = !1));


    try {
      parent.__4399finishgame(game.score.val);
    } catch (e) {}
    console.log("gameover :" + game.score.val);
  }),
  (WindowEnd.prototype.Drw = function () {
    this.text_score_v < game.score.val &&
      ((this.text_score_v = Math.min(
        this.text_score_v + this.text_score_speed,
        game.score.val
      )),
      this.text_score.setText(this.text_score_v.toString()),
      (this.text_score.getImg.regX = (this.text_score.getImg.width / 2) << 0));
  }),
  (WindowHelp.prototype.Show = function () {}),
  (WindowHelp.prototype.Drw = function () {}),
  (WindowLocation.prototype.Show = function () {
    void 0 != music
      ? ((this.btn_a.visible = !0),
        (this.btn_a_up.visible = !0),
        this.btn_a_up.gotoAndStop(
          music.getMute() ? "icon_sound_off" : "icon_sound_on"
        ))
      : ((this.btn_a.visible = !1), (this.btn_a_up.visible = !1));
  }),
  (WindowLocation.prototype.Drw = function () {
    game.location.Drw();
  }),
  (WindowMainMenu.prototype.Show = function () {
    (this.title.scaleX = this.title.scaleY = 0),
      void 0 != music
        ? ((this.btn_a.visible = !0),
          (this.btn_a_up.visible = !0),
          this.btn_a_up.gotoAndStop(
            music.getMute() ? "icon_sound_off" : "icon_sound_on"
          ))
        : ((this.btn_a.visible = !1), (this.btn_a_up.visible = !1));
  }),
  (WindowMainMenu.prototype.Drw = function () {
    (this.title.scaleX = this.title.scaleY = Math.min(
      this.title.scaleY + 0.1,
      1
    )),
      (this.sin += 0.2),
      (this.nose_0.scaleX = this.nose_0.scaleY =
        0.95 + 0.05 * Math.sin(this.sin)),
      (this.nose_1.scaleX = this.nose_1.scaleY =
        0.95 + 0.05 * Math.sin(this.sin));
  }),
  (WindowSplashScreen.prototype.Show = function () {
    this.alpha = 0;
  }),
  (WindowSplashScreen.prototype.Drw = function () {
    (this.alpha += 0.05),
      this.alpha < 1
        ? (this.getImg.alpha = this.alpha)
        : this.alpha > 3
        ? ((this.getImg.alpha = 4 - this.alpha),
          this.alpha > 4 && window_controller.Show("mm"))
        : (this.getImg.alpha = 1);
  }),
  (WindowsController.prototype.Show = function (a) {
    switch (a) {
      case "ss":
        (this.windows[0].getImg.visible = !0),
          (this.windows[1].getImg.visible = !1),
          (this.windows[2].getImg.visible = !1),
          (this.windows[3].getImg.visible = !1),
          (this.windows[4].getImg.visible = !1);
        break;
      case "mm":
        this.windows[1].Show(),
          (this.windows[0].getImg.visible = !1),
          (this.windows[1].getImg.visible = !0),
          (this.windows[2].getImg.visible = !1),
          (this.windows[3].getImg.visible = !1),
          (this.windows[4].getImg.visible = !1);
        break;
      case "loc":
        this.windows[2].Show(),
          (this.windows[0].getImg.visible = !1),
          (this.windows[1].getImg.visible = !1),
          (this.windows[2].getImg.visible = !0),
          (this.windows[3].getImg.visible = !1),
          (this.windows[4].getImg.visible = !1);
        break;
      case "end":
        this.windows[3].Show(),
          (this.windows[0].getImg.visible = !1),
          (this.windows[1].getImg.visible = !1),
          (this.windows[2].getImg.visible = !0),
          (this.windows[3].getImg.visible = !0),
          (this.windows[4].getImg.visible = !1);
        break;
      case "help":
        (this.windows[0].getImg.mouseEnabled = !1),
          (this.windows[1].getImg.mouseEnabled = !1),
          (this.windows[2].getImg.mouseEnabled = !1),
          (this.windows[3].getImg.mouseEnabled = !1),
          (this.windows[4].getImg.visible = !0);
    }
  }),
  (WindowsController.prototype.Drw = function () {
    this.windows[4].getImg.visible ||
      (this.windows[0].getImg.visible && this.windows[0].Drw(),
      this.windows[1].getImg.visible && this.windows[1].Drw(),
      this.windows[2].getImg.visible &&
        !this.windows[3].getImg.visible &&
        this.windows[2].Drw(),
      this.windows[3].getImg.visible && this.windows[3].Drw());
  });
